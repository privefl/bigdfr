// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// fill_double
void fill_double(SEXP xptr, size_t j, SEXP vec);
RcppExport SEXP _bigdfr_fill_double(SEXP xptrSEXP, SEXP jSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    Rcpp::traits::input_parameter< size_t >::type j(jSEXP);
    Rcpp::traits::input_parameter< SEXP >::type vec(vecSEXP);
    fill_double(xptr, j, vec);
    return R_NilValue;
END_RCPP
}
// fill_int
void fill_int(SEXP xptr, size_t j, SEXP vec);
RcppExport SEXP _bigdfr_fill_int(SEXP xptrSEXP, SEXP jSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    Rcpp::traits::input_parameter< size_t >::type j(jSEXP);
    Rcpp::traits::input_parameter< SEXP >::type vec(vecSEXP);
    fill_int(xptr, j, vec);
    return R_NilValue;
END_RCPP
}
// fill_ushort
void fill_ushort(SEXP xptr, size_t j, SEXP vec);
RcppExport SEXP _bigdfr_fill_ushort(SEXP xptrSEXP, SEXP jSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    Rcpp::traits::input_parameter< size_t >::type j(jSEXP);
    Rcpp::traits::input_parameter< SEXP >::type vec(vecSEXP);
    fill_ushort(xptr, j, vec);
    return R_NilValue;
END_RCPP
}
// getXPtrFDF
SEXP getXPtrFDF(std::string path, size_t n, IntegerVector ind_row, IntegerVector types);
RcppExport SEXP _bigdfr_getXPtrFDF(SEXP pathSEXP, SEXP nSEXP, SEXP ind_rowSEXP, SEXP typesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ind_row(ind_rowSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type types(typesSEXP);
    rcpp_result_gen = Rcpp::wrap(getXPtrFDF(path, n, ind_row, types));
    return rcpp_result_gen;
END_RCPP
}
// add_bytes
void add_bytes(std::string fileName, std::size_t nbyte);
RcppExport SEXP _bigdfr_add_bytes(SEXP fileNameSEXP, SEXP nbyteSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fileName(fileNameSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type nbyte(nbyteSEXP);
    add_bytes(fileName, nbyte);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bigdfr_fill_double", (DL_FUNC) &_bigdfr_fill_double, 3},
    {"_bigdfr_fill_int", (DL_FUNC) &_bigdfr_fill_int, 3},
    {"_bigdfr_fill_ushort", (DL_FUNC) &_bigdfr_fill_ushort, 3},
    {"_bigdfr_getXPtrFDF", (DL_FUNC) &_bigdfr_getXPtrFDF, 4},
    {"_bigdfr_add_bytes", (DL_FUNC) &_bigdfr_add_bytes, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_bigdfr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
